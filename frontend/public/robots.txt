# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
........................................

const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
require('dotenv').config();

const app = express();

app.use(cors());
app.use(express.json());

console.log('MONGO_URI from .env:', process.env.MONGO_URI);

mongoose
  .connect('mongodb://localhost:27017/carDekho')
  .then(() => console.log(' Connected to MongoDB'))
  .catch((err) => {
    console.error('MongoDB connection error:', err);
    process.exit(1);
  });

// Define Schema & Model
const brandSchema = new mongoose.Schema({
  name: { type: String, required: true },
  imageUrl: { type: String, required: true },
  link: { type: String },
});

const Brand = mongoose.model('Brand', brandSchema);

// API to Get Brands
app.get('/api/brands', async (req, res) => {
  const { name, imageUrl } = req.body;

  if (!name || !imageUrl) {
    return res
      .status(400)
      .json({ success: false, message: 'All fields are required' });
  }

  try {
    const existingBrand = await Brand.findOne({ name });
    if (existingBrand) {
      return res
        .status(400)
        .json({ success: false, message: 'Brand already exists' });
    }

    const newBrand = new Brand({
      name,
      imageUrl,
      link: `/cars/${name.replace(/\s+/g, '')}`, // Generate link dynamically
    });

    await newBrand.save();
    res.json({ success: true, brand: newBrand });
  } catch (error) {
    res
      .status(500)
      .json({ success: false, message: 'Error adding brand', error });
  }
});

// API to Add Brand
app.post('/api/add-brand', async (req, res) => {
  const { name, imageUrl } = req.body;

  if (!name || !imageUrl) {
    return res
      .status(400)
      .json({ success: false, message: 'All fields are required' });
  }

  try {
    const newBrand = new Brand({
      name,
      imageUrl,
      link: `/cars/${name.replace(/\s+/g, '')}`, // Generate link dynamically
    });

    await newBrand.save();
    // Send only the new brand, not the entire list of brands
    res.json({ success: true, brand: newBrand });
  } catch (error) {
    res
      .status(500)
      .json({ success: false, message: 'Error adding brand', error });
  }
});

app.use((err, req, res, next) => {
  console.error(err.stack);
  res
    .status(500)
    .json({ message: 'Something went wrong!', error: err.message });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(` Server running on http://localhost:${PORT}`);
});

......................................04-03-25
main/////
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import '../Admin/main.css';

const AdminPanel = () => {
  const [brands, setBrands] = useState([]);
  const [name, setName] = useState('');
  const [imageUrl, setImageUrl] = useState('');
  const [successMessage, setSuccessMessage] = useState('');

  // Fetch Brands from Backend
  useEffect(() => {
    fetchBrands();
  });

  const fetchBrands = () => {
    axios
      .get('http://localhost:5008/api/brands')
      .then((response) => {
        console.log('Fetched brands:', response.data); // Log the fetched data
        setBrands(response.data);
      })
      .catch((error) => {
        console.error('Error fetching brands:', error);
        console.error('Error response:', error.response?.data); // Log the error response
      });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!name || !imageUrl) {
      alert('Please fill in all fields.');
      return;
    }

    axios
      .post('http://localhost:5008/api/add-brand', { name, imageUrl })
      .then((response) => {
        console.log('Brand added:', response.data);
        setName('');
        setImageUrl('');
        fetchBrands();
        setSuccessMessage('Brand added successfully!');
      })
      .catch((error) => {
        console.error('Error adding brand:', error);
      });
  };

  return (
    <div className="admin-panel">
      <div className="sidebar">
        <h2>Admin </h2>
        <ul>
          <li>
            <a href="#">Dashboard</a>
          </li>
          <li>
            <a href="#">Add Brand</a>
          </li>
        </ul>
      </div>

      {/* Main Content */}
      <div className="main-content">
        <h2>Add a New Car Brand</h2>

        {successMessage && <p className="success">{successMessage}</p>}

        <form onSubmit={handleSubmit}>
          <input
            type="text"
            placeholder="Brand Name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
          <input
            type="text"
            placeholder="Image URL"
            value={imageUrl}
            onChange={(e) => setImageUrl(e.target.value)}
            required
          />
          <button type="submit">Add Brand</button>
        </form>

        <h2>Existing Brands</h2>
        <div className="brand-list">
          {brands.length > 0 ? (
            brands.map((brand) => (
              <div key={brand._id} className="brand-item">
                <img src={brand.imageUrl} alt={brand.name} />
                <p>{brand.name}</p>
              </div>
            ))
          ) : (
            <p>No brands found.</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default AdminPanel;


///server
const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
require('dotenv').config();

const app = express();

app.use(cors({ origin: 'http://localhost:3000' }));
app.use(express.json());

mongoose
  .connect('mongodb://localhost:27017/carDekho')
  .then(() => console.log('Connected to MongoDB'))
  .catch((err) => {
    console.error('MongoDB connection error:', err);
    process.exit(1);
  });

// Define Schema & Model
const brandSchema = new mongoose.Schema({
  name: { type: String, required: true },
  imageUrl: { type: String, required: true },
  link: { type: String },
});

const Brand = mongoose.model('Brand', brandSchema);

// API to Get Brands
app.get('/api/brands', async (req, res) => {
  try {
    const brands = await Brand.find(); // Fetch all brands from the database
    res.json(brands); // Send the list of brands as the response
  } catch (error) {
    res
      .status(500)
      .json({ success: false, message: 'Error fetching brands', error });
  }
});
// API to Add Brand
app.post('/api/add-brand', async (req, res) => {
  const { name, imageUrl } = req.body;

  if (!name || !imageUrl) {
    return res
      .status(400)
      .json({ success: false, message: 'All fields are required' });
  }

  try {
    const newBrand = new Brand({
      name,
      imageUrl,
      link: `/cars/${name.replace(/\s+/g, '')}`,
    });

    await newBrand.save();
    // Send only the new brand, not the entire list of brands
    res.json({ success: true, brand: newBrand });
  } catch (error) {
    res
      .status(500)
      .json({ success: false, message: 'Error adding brand', error });
  }
});

app.use((err, req, res, next) => {
  console.error(err.stack);
  res
    .status(500)
    .json({ message: 'Something went wrong!', error: err.message });
});

const PORT = 5008;
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

////////////////brezza
import React, { useState } from 'react';
import { Carousel, Card } from 'react-bootstrap'; // Import Carousel from react-bootstrap
import 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS
import { FaRegThumbsUp, FaShareAlt } from 'react-icons/fa'; // Importing React Icons for Like and Share buttons
import '../../../CSS/model.css';
import Nav from '../../Nav'; // Assuming you already have a Nav component
import { SiTransmission } from 'react-icons/si';
import Footer from '../../Footer';
import { useNavigate } from 'react-router-dom';

const Fronx = () => {
  const [activeTab, setActiveTab] = useState('key-specification');
  const [variant, setVariant] = useState('all-type');
  const [selectedVariants, setSelectedVariants] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [transmission, setTransmission] = useState('all');

  const carcolor = [
    {
      name: 'Pearl Arctic White',
      image:
        'https://stimg.cardekho.com/images/car-images/360x240/Maruti/Brezza/8679/Maruti-Brezza-Lxi/1656651893738/225_pearl-arctic-grey_4a4c4b-copy.jpg?imwidth=480&impolicy=resize',
    },
    {
      name: 'Exuberant Blue',
      image:
        'https://stimg.cardekho.com/images/car-images/360x240/Maruti/Brezza/8679/Maruti-Brezza-Lxi/1656651893738/223_esxuberant-blue_21479a.jpg?imwidth=480&impolicy=resize',
    },
    {
      name: 'Pearl Midnight Black',
      image:
        'https://stimg.cardekho.com/images/car-images/360x240/Maruti/Brezza/9182/1679896941719/221_pearl-midnight-black_000000.jpg?imwidth=480&impolicy=resize',
    },
    {
      name: 'Brave Khaki',
      image:
        'https://stimg.cardekho.com/images/car-images/360x240/Maruti/Brezza/8679/Maruti-Brezza-Lxi/1656651893738/222_brave-khaki_897c5d.jpg?imwidth=480&impolicy=resize',
    },
    {
      name: 'Brave Khaki With Pearl Arctic White',
      image:
        'https://stimg.cardekho.com/images/car-images/360x240/Maruti/Brezza/8679/Maruti-Brezza-Lxi/1656651893738/226_brave-khaki-with-pearl-arctic-white_cbb893.jpg?imwidth=480&impolicy=resize',
    },
    {
      name: 'Magma Gray',
      image:
        'https://stimg.cardekho.com/images/car-images/360x240/Maruti/Brezza/8679/Maruti-Brezza-Lxi/1656651893738/224_magma-gray_717372.jpg?imwidth=480&impolicy=resize',
    },
    {
      name: 'Sizzling Red/Midnight Black',
      image:
        'https://stimg.cardekho.com/images/car-images/360x240/Maruti/Brezza/10387/1718007664943/221_sizzling-red-with-midnight-black-roof_ff8a91.jpg?imwidth=480&impolicy=resize',
    },
  ];

  const carimages = [
    {
      image:
        'https://stimg.cardekho.com/images/carexteriorimages/630x420/Maruti/Brezza/10388/1694424068944/front-left-side-47.jpg',
    },
    {
      image:
        'https://stimg.cardekho.com/images/carexteriorimages/630x420/Maruti/Brezza/10388/1694424068944/rear-left-view-121.jpg',
    },
    {
      image:
        'https://stimg.cardekho.com/images/carexteriorimages/630x420/Maruti/Brezza/10388/1694424068944/grille-97.jpg',
    },
    {
      image:
        'https://stimg.cardekho.com/images/carexteriorimages/630x420/Maruti/Brezza/10388/1694424068944/headlight-43.jpg',
    },
    {
      image:
        'https://stimg.cardekho.com/images/carexteriorimages/630x420/Maruti/Brezza/10388/1694424068944/taillight-44.jpg',
    },
    {
      image:
        'https://stimg.cardekho.com/images/carexteriorimages/630x420/Maruti/Brezza/10388/1694424068944/side-mirror-(body)-93.jpg',
    },
  ];
  const specifications = {
    'key-specification': {
      firstColumn: [
        { label: 'Engine', value: '1462cc' },
        { label: 'Torque', value: '121.5 Nm - 136.8 Nm' },
        { label: 'Transmission', value: 'Manual/Automatic' },
      ],
      secondColumn: [
        { label: 'Power', value: '86.63 - 101.64 bhp' },
        { label: 'Seating Capacity', value: '5' },
        { label: 'Fuel', value: 'Petrol/CNG' },
      ],
    },
    'top-features': {
      firstColumn: [
        { label: 'Rear AC Vents' },
        { label: 'Advanced Internet Features' },
        { label: 'Cruise Control' },
        { label: 'Height Adjustable Driver Seat' },
      ],
      secondColumn: [
        { label: 'Parking Sensors' },
        { label: 'Automatic Climate Control' },
        { label: 'Sunroof' },
        { label: '360 Degree Camera' },
      ],
    },
  };
  const variants = {
    'brezza-lxi': {
      variant: 'Brezza LXi (Base Model)',
      engine: '1462cc',
      power: '101.64bhp',
      drivetype: 'FWD',
      safety: '4 Star',
      gc: '198mm',
      transmission: 'Manual',
      fuel: 'Petrol',
      mileage: '17.38 kmpl',
      price: '8.54 Lakh*',
      exshowroom: '854000',
      rto: '50000',
      insurance: '30000',
      onroad: '',
      features: [
        'Rear AC Vents',
        'Advanced Internet Features',
        'Cruise Control',
        'Height Adjustable Driver Seat',
      ],
    },
    'brezza-lxi-cng': {
      variant: 'Brezza LXi CNG',
      engine: '1462cc',
      power: '86.63bhp',
      drivetype: 'FWD',
      safety: '4 Star',
      gc: '198mm',
      transmission: 'Manual',
      fuel: 'CNG',
      mileage: '25.51 km/kg',
      price: '9.49 Lakh*',
      exshowroom: '949000',
      rto: '50000',
      insurance: '30000',
      onroad: '',
      features: [
        'Rear AC Vents',
        'Advanced Internet Features',
        'Cruise Control',
        'Height Adjustable Driver Seat',
      ],
    },
    'brezza-vxi': {
      variant: 'Brezza VXi',
      engine: '1462cc',
      power: '101.64bhp',
      drivetype: 'FWD',
      safety: '4 Star',
      gc: '198mm',
      transmission: 'Manual',
      fuel: 'Petrol',
      mileage: '17.38 kmpl',
      price: '9.70 Lakh*',
      exshowroom: '970000',
      rto: '50000',
      insurance: '₹30,000',
      onroad: '',
      features: [
        'Rear AC Vents',
        'Advanced Internet Features',
        'Cruise Control',
        'Height Adjustable Driver Seat',
      ],
    },
    'brezza-vxi-at': {
      variant: 'Brezza VXi AT',
      engine: '1462cc',
      power: '101.64bhp',
      drivetype: 'FWD',
      safety: '4 Star',
      gc: '198mm',
      transmission: 'Automatic',
      fuel: 'Petrol',
      mileage: '19.8 kmpl',
      price: '11.10 Lakh*',
      exshowroom: '1110000',
      rto: '50000',
      insurance: '30000',
      onroad: '',
      features: [
        'Rear AC Vents',
        'Advanced Internet Features',
        'Cruise Control',
        'Height Adjustable Driver Seat',
      ],
    },
    'brezza-zxi': {
      variant: 'Brezza ZXi (Top Model)',
      engine: '1462cc',
      power: '101.64bhp',
      drivetype: 'FWD',
      safety: '4 Star',
      gc: '198mm',
      transmission: 'Manual',
      fuel: 'Petrol',
      mileage: '19.89 kmpl',
      price: '11.14 Lakh*',
      exshowroom: '1114000',
      rto: '50000',
      insurance: '30000',
      onroad: '',
      features: [
        'Rear AC Vents',
        'Advanced Internet Features',
        'Cruise Control',
        'Height Adjustable Driver Seat',
      ],
    },
    'brezza-zxi-plus': {
      variant: 'Brezza ZXi Plus (Top Model)',
      engine: '1462cc',
      power: '101.64bhp',
      drivetype: 'FWD',
      safety: '4 Star',
      gc: '198mm',
      transmission: 'Automatic',
      fuel: 'Petrol',
      mileage: '17.38 kmpl',
      price: '11.54 Lakh*',
      exshowroom: '1154000',
      rto: '50000',
      insurance: '30000',
      onroad: '',
      features: [
        'Rear AC Vents',
        'Advanced Internet Features',
        'Cruise Control',
        'Height Adjustable Driver Seat',
      ],
    },
    'fronx-lxi': {
      variant: 'Fronx (Top Model)',
      engine: '1462cc',
      power: '101.64bhp',
      drivetype: 'FWD',
      safety: '4 Star',
      gc: '198mm',
      transmission: 'Automatic',
      fuel: 'CNG',
      mileage: '21 kmpl',
      price: '9.54 Lakh*',
      exshowroom: '954000',
      rto: '50000',
      insurance: '30000',
      onroad: '',
      features: [
        'Rear AC Vents',
        'Advanced Internet Features',
        'Cruise Control',
        'Height Adjustable Driver Seat',
      ],
    },
  };

  const handleComparison = () => {
    if (selectedVariants.length >= 2) {
      setShowModal(true);
    } else {
      alert('Please select at least two variants for comparison.');
    }
  };

  const filteredVariants = Object.values(variants).filter((car) => {
    if (variant === 'all-type') return true; // Show all variants
    return car.fuel.toLowerCase() === variant.toLowerCase(); // Filter by fuel type
  });

  const navigate = useNavigate();
  const handleNavigation = (key) => {
    const variant = variants[key];
    navigate(`/type/${key}`, { state: { variantData: variant } });
  };

  return (
    <>
      <Nav />
      <div className="container my-5">
        <div className="row">
          <div className="col-md-6">
            <div
              className="card"
              style={{
                borderRadius: '15px',
                border: '1px solid #ddd',
                objectFit: 'cover',
                boxSizing: 'border-box',
                boxShadow: '0px 2px 7px',
              }}
            >
              <Carousel>
                <Carousel.Item>
                  <img
                    className="d-block w-100"
                    src="https://stimg.cardekho.com/images/carexteriorimages/630x420/Maruti/Brezza/10388/1694424068944/front-left-side-47.jpg?tr=w-664"
                    alt="First slide"
                  />
                </Carousel.Item>
                <Carousel.Item>
                  <img
                    className="d-block w-100"
                    src="https://stimg.cardekho.com/images/carexteriorimages/630x420/Maruti/Brezza/10388/1694424068944/rear-left-view-121.jpg?tr=w-664"
                    alt="Second slide"
                  />
                </Carousel.Item>
                <Carousel.Item>
                  <img
                    className="d-block w-100"
                    src="https://stimg.cardekho.com/images/carexteriorimages/630x420/Maruti/Brezza/10388/1694424068944/grille-97.jpg?tr=w-664"
                    alt="Third slide"
                  />
                </Carousel.Item>
              </Carousel>
            </div>
          </div>

          <div className="col-md-6">
            <div
              className="card"
              style={{ borderRadius: '15px', border: '1px solid #ddd' }}
            >
              <div className="card-body">
                <div className="d-flex justify-content-between">
                  <h3 className="card-title">Maruti Suzuki Brezza</h3>
                  <div className="d-flex ">
                    <FaRegThumbsUp
                      className="mr-2"
                      style={{ cursor: 'pointer' }}
                    />
                    <FaShareAlt style={{ cursor: 'pointer' }} />
                  </div>
                </div>

                <div className="star-rating">
                  <span className="text-warning">⭐⭐⭐⭐⭐</span>
                </div>

                <div>
                  <h5 className="card-subtitle text-bold mb-3">
                    ₹ 7.51-13.04 lakh*
                  </h5>

                  <button className="btn btn-primary mt-3">
                    Get On Road Price
                  </button>
                </div>

                {/* <div className="mt-4">
                  <p className="text-muted">
                    Ex-Showroom Price in Mumbai: ₹11,00,000
                  </p>
                </div> */}
              </div>
            </div>
          </div>

          <div className="col-md-12 mt-4">
            <div
              className="card"
              style={{ borderRadius: '15px', border: '1px solid #ddd' }}
            >
              <div className="card-body">
                <h4 className="card-title">Maruti Brezza specs & features</h4>
                <div className="mt-4">
                  <div className="tabs">
                    <button
                      onClick={() => setActiveTab('key-specification')}
                      className={`tab-btn ${activeTab === 'key-specification' ? 'active' : ''}`}
                    >
                      Key Specification
                    </button>
                    <button
                      onClick={() => setActiveTab('top-features')}
                      className={`tab-btn ${activeTab === 'top-features' ? 'active' : ''}`}
                    >
                      Top Features
                    </button>
                  </div>

                  <div className="specifications mt-4">
                    <div className="row">
                      <div className="col">
                        {Array.isArray(
                          specifications[activeTab]?.firstColumn,
                        ) &&
                          specifications[activeTab].firstColumn.map(
                            (item, index) => (
                              <p key={index}>
                                <strong>{item.label}:</strong> {item.value}
                              </p>
                            ),
                          )}
                      </div>
                      <div className="col">
                        {Array.isArray(
                          specifications[activeTab]?.secondColumn,
                        ) &&
                          specifications[activeTab].secondColumn.map(
                            (item, index) => (
                              <p key={index}>
                                <strong>{item.label}:</strong> {item.value}
                              </p>
                            ),
                          )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <br></br>

            <div
              className="card"
              style={{ borderRadius: '15px', border: '1px solid #ddd' }}
            >
              <div className="card-body">
                <h4 className="card-title">Maruti Suzuki Brezza Price</h4>
                <div
                  className="tabs"
                  style={{
                    borderBottom: '1px solid #ddd',
                    paddingBottom: '10px',
                  }}
                >
                  <button
                    onClick={() => setVariant('all-type')}
                    className={`tab-btn ${variant === 'all-type' ? 'active' : ''}`}
                  >
                    All
                  </button>
                  <button
                    onClick={() => setVariant('petrol')}
                    className={`tab-btn ${variant === 'petrol' ? 'active' : ''}`}
                  >
                    Petrol
                  </button>
                  <button
                    onClick={() => setVariant('cng')}
                    className={`tab-btn ${variant === 'cng' ? 'active' : ''}`}
                  >
                    CNG
                  </button>
                </div>

                <div className="variants mt-4">
                  {filteredVariants.map((index) => (
                    <div></div>
                  ))}
                </div>

                {/* Transmission filter radio buttons */}
                <div className="transmission-filter mt-3">
                  <label>
                    <input
                      type="radio"
                      value="all"
                      checked={transmission === 'all'}
                      onChange={() => setTransmission('all')}
                    />
                    All
                  </label>
                  <label className="ml-3">
                    <input
                      type="radio"
                      value="Automatic"
                      checked={transmission === 'Automatic'}
                      onChange={() => setTransmission('Automatic')}
                    />
                    Automatic
                  </label>
                  <label className="ml-3">
                    <input
                      type="radio"
                      value="Manual"
                      checked={transmission === 'Manual'}
                      onChange={() => setTransmission('Manual')}
                    />
                    Manual
                  </label>
                </div>

                {/* <div className="variants mt-4">
                  {filteredVariants.map((index) => (
                    <div className="variant-card" key={index}></div>
                  ))}
                </div> */}

                <div className="mt-4">
                  <div className="row">
                    {Object.keys(variants).map((key) => {
                      const variant = variants[key];

                      return (
                        <div className="row mb-3" key={key}>
                          <div className="col">
                            <strong
                              style={{ cursor: 'pointer' }}
                              onClick={() => handleNavigation(key)}
                            >
                              {variant.variant}
                            </strong>
                            <p>Engine: {variant.engine}</p>
                            <p>Transmission: {variant.transmission}</p>
                            <p>Fuel: {variant.fuel}</p>
                            <p>Mileage: {variant.mileage}</p>
                          </div>
                          <div className="col text-center">
                            <h4>₹ {variant.price}</h4>
                            <button className="btn btn-primary mt-3">
                              Get On Road Price
                            </button>
                          </div>
                          <div className="col text-right">
                            <input type="checkbox" />
                            <label>Compare</label>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>

                <div className="mt-4">
                  <button
                    onClick={handleComparison}
                    className="btn btn-success"
                  >
                    Compare Selected
                  </button>
                </div>
              </div>
            </div>
            <br></br>
            <div
              className="card"
              style={{ borderRadius: '15px', border: '1px solid #ddd' }}
            >
              <div className="card-body">
                <h4>Maruti Brezza Colors</h4>
                <small>
                  Maruti Brezza is available in the following colours in India.
                  View all car images with different colour options on CarDekho.
                </small>

                {/* Bootstrap Carousel for Image Slider */}
                <Carousel interval={null}>
                  {/* Dividing car colors into groups of 3 for each Carousel item */}
                  {[...Array(Math.ceil(carcolor.length / 3))].map((_, idx) => (
                    <Carousel.Item key={idx}>
                      <div className="d-flex justify-content-around">
                        {carcolor
                          .slice(idx * 3, idx * 3 + 3)
                          .map((color, index) => (
                            <Card
                              key={index}
                              style={{
                                width: '30%',
                                margin: '10px',
                                borderRadius: '15px',
                              }}
                            >
                              <Card.Img variant="top" src={color.image} />
                              <Card.Body>
                                <Card.Title>{color.name}</Card.Title>
                              </Card.Body>
                            </Card>
                          ))}
                      </div>
                    </Carousel.Item>
                  ))}
                </Carousel>
              </div>
            </div>
            <br></br>

            <div
              className="card"
              style={{ borderRadius: '15px', border: '1px solid #ddd' }}
            >
              <div className="card-body">
                <h4>Maruti Brezza Images</h4>
                <small>
                  We have 35 images of Maruti Brezza, view picture gallery of
                  Brezza which includes exterier, interior & 360° view of SUV
                  car.
                </small>

                {/* Bootstrap Carousel for Image Slider */}
                <Carousel interval={null}>
                  {/* Dividing car colors into groups of 3 for each Carousel item */}
                  {[...Array(Math.ceil(carimages.length / 3))].map((_, idx) => (
                    <Carousel.Item key={idx}>
                      <div className="d-flex justify-content-around">
                        {carimages
                          .slice(idx * 3, idx * 3 + 3)
                          .map((color, index) => (
                            <Card
                              key={index}
                              style={{
                                width: '30%',
                                margin: '10px',
                                borderRadius: '15px',
                              }}
                            >
                              <Card.Img variant="top" src={color.image} />
                            </Card>
                          ))}
                      </div>
                    </Carousel.Item>
                  ))}
                </Carousel>
              </div>
            </div>
          </div>
        </div>
      </div>
      <Footer />
    </>
  );
};

export default Fronx;
.................................................................................................................................
app.get('/api/cars/brand/:brandId', async (req, res) => {
  try {
    console.log('HERE');
    const brandId = req.params.brandId;
    console.log({ brandId });
    const cars = await Car.find({
      brandId: new mongoose.Types.ObjectId(brandId),
    }); // Fetch cars that belong to the selected brand
    console.log({ cars });
    res.json(cars);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Error fetching cars' });
  }
});